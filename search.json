[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Solymos. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Peter Solymos (2009). Processing Ecological Data R mefa Package. Journal Statistical Software 29(8), 1-28. URL https://doi.org/10.18637/jss.v029.i08","code":"@Article{,   title = {Processing Ecological Data in {R} with the {mefa} Package},   author = {P\\'eter S\\'olymos},   journal = {Journal of Statistical Software},   year = {2009},   volume = {29},   number = {8},   pages = {1--28},   url = {https://doi.org/10.18637/jss.v029.i08}, }"},{"path":"/index.html","id":"mefa4-multivariate-data-handling-with-s4-classes-and-sparse-matrices","dir":"","previous_headings":"","what":"Multivariate Data Handling with S4 Classes and Sparse Matrices","title":"Multivariate Data Handling with S4 Classes and Sparse Matrices","text":"S4 update mefa package using sparse matrices enhanced efficiency. Sparse array-like objects supported via lists sparse matrices. Main functions: Xtab, Mefa. Accessor replacement functions: xtab, samp, taxa. Methods: mbind, groupSums, groupMeans. See tutorial design decisions performance comparisons (Rmd, PDF)","code":""},{"path":"/index.html","id":"versions","dir":"","previous_headings":"","what":"Versions","title":"Multivariate Data Handling with S4 Classes and Sparse Matrices","text":"Install CRAN version : Install development version GitHub: User visible changes listed NEWS file. Previously hosted R-Forge (rev 619).","code":"install.packages(\"mefa4\") library(devtools) install_github(\"psolymos/mefa4\")"},{"path":"/index.html","id":"report-a-problem","dir":"","previous_headings":"","what":"Report a problem","title":"Multivariate Data Handling with S4 Classes and Sparse Matrices","text":"Use issue tracker report problem.","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Multivariate Data Handling with S4 Classes and Sparse Matrices","text":"GPL-2","code":""},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Multivariate Data Handling with S4 Classes and Sparse Matrices","text":"Solymos P. 2008. mefa: R package handling reporting count data. Community Ecology 9, 125-127. (PDF) Solymos P. 2009. Processing ecological data R mefa package. Journal Statistical Software 29(8), 1-28. DOI: 10.18637/jss.v029.i08","code":""},{"path":"/reference/Mefa.html","id":null,"dir":"Reference","previous_headings":"","what":"'Mefa' Class — Mefa","title":"'Mefa' Class — Mefa","text":"Creating object class \"Mefa\".","code":""},{"path":"/reference/Mefa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'Mefa' Class — Mefa","text":"","code":"Mefa(xtab, samp, taxa, join = c(\"left\", \"inner\"), drop = FALSE)"},{"path":"/reference/Mefa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'Mefa' Class — Mefa","text":"xtab matrix sparse matrix. samp data frame NULL. taxa data frame NULL. join character, \"left\" (default) \"inner\". drop logical, unused levels data frames dropped.","code":""},{"path":"/reference/Mefa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"'Mefa' Class — Mefa","text":"samp taxa tables matched corresponding dimnames xtab: rownames samp, colnames taxa. join = \"left\", rows columns xtab retained, missing items corresponding attribute tables filled NAs. join = \"inner\", intersection corresponding names retained. xtab slot sparse matrix (dgCMatrix). input class MefaMatrix class union matrix sparseMatrix classes. samp taxa slots take data frame NULL, two form MefaDataFrame class union. virtual classes mefa stcs defined seamless coercion S3 S4 classes.","code":""},{"path":"/reference/Mefa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'Mefa' Class — Mefa","text":"S4 object class \"Mefa\" 4 slots: xtab, samp, taxa, join.","code":""},{"path":"/reference/Mefa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"'Mefa' Class — Mefa","text":"Peter Solymos <solymos@ualberta.ca>","code":""},{"path":"/reference/Mefa.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"'Mefa' Class — Mefa","text":"xtab dimnames, matching attribute tables can problematic.","code":""},{"path":[]},{"path":"/reference/Mefa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'Mefa' Class — Mefa","text":"","code":"x <- data.frame(     sample = paste(\"Sample\", c(1,1,2,2,3,4), sep=\".\"),     species = c(paste(\"Species\", c(1,1,1,2,3), sep=\".\"),  \"zero.pseudo\"),     count = c(1,2,10,3,4,0),     stringsAsFactors = TRUE) samp <- data.frame(samples=levels(x$sample), var1=1:2,     stringsAsFactors = TRUE) taxa <- data.frame(specnames=levels(x$species), var2=c(\"b\",\"a\"),     stringsAsFactors = TRUE) rownames(samp) <- samp$samples rownames(taxa) <- taxa$specnames  ## Xtab class, counts by repetitions in RHS (x0 <- Xtab(~ sample + species, x)) #> 4 x 4 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 zero.pseudo #> Sample.1         2         .         .           . #> Sample.2         1         1         .           . #> Sample.3         .         .         1           . #> Sample.4         .         .         .           1  ## counts by LHS and repetitions in RHS (x1 <- Xtab(count ~ sample + species, x)) #> 4 x 4 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 zero.pseudo #> Sample.1         3         .         .           . #> Sample.2        10         3         .           . #> Sample.3         .         .         4           . #> Sample.4         .         .         .           .  ## drop all empty rows (x2 <- Xtab(count ~ sample + species, x, cdrop=FALSE,rdrop=TRUE)) #> 3 x 4 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 zero.pseudo #> Sample.1         3         .         .           . #> Sample.2        10         3         .           . #> Sample.3         .         .         4           .  ## drop all empty columns Xtab(count ~ sample + species, x, cdrop=TRUE,rdrop=FALSE) #> 4 x 3 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 #> Sample.1         3         .         . #> Sample.2        10         3         . #> Sample.3         .         .         4 #> Sample.4         .         .         .  ## drop specific columns by placeholder Xtab(count ~ sample + species, x, cdrop=\"zero.pseudo\") #> 4 x 3 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 #> Sample.1         3         .         . #> Sample.2        10         3         . #> Sample.3         .         .         4 #> Sample.4         .         .         .  ## Mefa class, standard (x3 <- Mefa(x1, samp, taxa)) #> Object of class \"Mefa\" #>   ..@ xtab: 4 x 4 sparse Matrix #>   ..@ samp: data frame with 2 variables #>   ..@ taxa: data frame with 2 variables #>   ..@ join: left  unclass(x3) #> <S4 Type Object> #> attr(,\"xtab\") #> 4 x 4 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 zero.pseudo #> Sample.1         3         .         .           . #> Sample.2        10         3         .           . #> Sample.3         .         .         4           . #> Sample.4         .         .         .           . #> attr(,\"samp\") #>           samples var1 #> Sample.1 Sample.1    1 #> Sample.2 Sample.2    2 #> Sample.3 Sample.3    1 #> Sample.4 Sample.4    2 #> attr(,\"taxa\") #>               specnames var2 #> Species.1     Species.1    b #> Species.2     Species.2    a #> Species.3     Species.3    b #> zero.pseudo zero.pseudo    a #> attr(,\"join\") #> [1] \"left\" x3@xtab #> 4 x 4 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 zero.pseudo #> Sample.1         3         .         .           . #> Sample.2        10         3         .           . #> Sample.3         .         .         4           . #> Sample.4         .         .         .           . x3@samp #>           samples var1 #> Sample.1 Sample.1    1 #> Sample.2 Sample.2    2 #> Sample.3 Sample.3    1 #> Sample.4 Sample.4    2 x3@taxa #>               specnames var2 #> Species.1     Species.1    b #> Species.2     Species.2    a #> Species.3     Species.3    b #> zero.pseudo zero.pseudo    a x3@join #> [1] \"left\"  ## effects of left join, NULL taxa slot, xtab is (not sparse) matrix (x4 <- Mefa(as.matrix(x1), samp[1:2,])) #> Object of class \"Mefa\" #>   ..@ xtab: 4 x 4 sparse Matrix #>   ..@ samp: data frame with 2 variables #>   ..@ taxa: NULL #>   ..@ join: left  unclass(x4) #> <S4 Type Object> #> attr(,\"xtab\") #> 4 x 4 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 zero.pseudo #> Sample.1         3         .         .           . #> Sample.2        10         3         .           . #> Sample.3         .         .         4           . #> Sample.4         .         .         .           . #> attr(,\"samp\") #>           samples var1 #> Sample.1 Sample.1    1 #> Sample.2 Sample.2    2 #> Sample.3     <NA>   NA #> Sample.4     <NA>   NA #> attr(,\"taxa\") #> `\\001NULL\\001` #> attr(,\"join\") #> [1] \"left\"  ## effects of inner join (intersect) (x5 <- Mefa(x2, samp, taxa, join=\"inner\")) #> Object of class \"Mefa\" #>   ..@ xtab: 3 x 4 sparse Matrix #>   ..@ samp: data frame with 2 variables #>   ..@ taxa: data frame with 2 variables #>   ..@ join: inner  unclass(x5) #> <S4 Type Object> #> attr(,\"xtab\") #> 3 x 4 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 zero.pseudo #> Sample.1         3         .         .           . #> Sample.2        10         3         .           . #> Sample.3         .         .         4           . #> attr(,\"samp\") #>           samples var1 #> Sample.1 Sample.1    1 #> Sample.2 Sample.2    2 #> Sample.3 Sample.3    1 #> attr(,\"taxa\") #>               specnames var2 #> Species.1     Species.1    b #> Species.2     Species.2    a #> Species.3     Species.3    b #> zero.pseudo zero.pseudo    a #> attr(,\"join\") #> [1] \"inner\" unclass(Mefa(x1, samp[1:2,], join=\"inner\")) #> <S4 Type Object> #> attr(,\"xtab\") #> 2 x 4 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 zero.pseudo #> Sample.1         3         .         .           . #> Sample.2        10         3         .           . #> attr(,\"samp\") #>           samples var1 #> Sample.1 Sample.1    1 #> Sample.2 Sample.2    2 #> attr(,\"taxa\") #> `\\001NULL\\001` #> attr(,\"join\") #> [1] \"inner\"  ## xtab only Mefa (x6 <- Mefa(x1)) #> Object of class \"Mefa\" #>   ..@ xtab: 4 x 4 sparse Matrix #>   ..@ samp: NULL #>   ..@ taxa: NULL #>   ..@ join: left   ## creating new Mefa object without Mefa() new(\"Mefa\", xtab=x1, samp=samp, taxa=taxa,join=\"left\") #> Object of class \"Mefa\" #>   ..@ xtab: 4 x 4 sparse Matrix #>   ..@ samp: data frame with 2 variables #>   ..@ taxa: data frame with 2 variables #>   ..@ join: left   ## dim and dimnames dim(x5) #> [1] 3 4 dimnames(x5) #> [[1]] #> [1] \"Sample.1\" \"Sample.2\" \"Sample.3\" #>  #> [[2]] #> [1] \"Species.1\"   \"Species.2\"   \"Species.3\"   \"zero.pseudo\" #>  dn <- list(paste(\"S\", 1:3, sep=\"\"), paste(\"SPP\", 1:4, sep=\"\")) dimnames(x5) <- dn unclass(x5) #> <S4 Type Object> #> attr(,\"xtab\") #> 3 x 4 sparse Matrix of class \"dgCMatrix\" #>    SPP1 SPP2 SPP3 SPP4 #> S1    3    .    .    . #> S2   10    3    .    . #> S3    .    .    4    . #> attr(,\"samp\") #>     samples var1 #> S1 Sample.1    1 #> S2 Sample.2    2 #> S3 Sample.3    1 #> attr(,\"taxa\") #>        specnames var2 #> SPP1   Species.1    b #> SPP2   Species.2    a #> SPP3   Species.3    b #> SPP4 zero.pseudo    a #> attr(,\"join\") #> [1] \"inner\" dimnames(x5)[[1]] <- paste(\"S\", 1:3, sep=\"_\") unclass(x5) #> <S4 Type Object> #> attr(,\"xtab\") #> 3 x 4 sparse Matrix of class \"dgCMatrix\" #>     SPP1 SPP2 SPP3 SPP4 #> S_1    3    .    .    . #> S_2   10    3    .    . #> S_3    .    .    4    . #> attr(,\"samp\") #>      samples var1 #> S_1 Sample.1    1 #> S_2 Sample.2    2 #> S_3 Sample.3    1 #> attr(,\"taxa\") #>        specnames var2 #> SPP1   Species.1    b #> SPP2   Species.2    a #> SPP3   Species.3    b #> SPP4 zero.pseudo    a #> attr(,\"join\") #> [1] \"inner\" dimnames(x5)[[2]] <- paste(\"SPP\", 1:4, sep=\"_\") unclass(x5) #> <S4 Type Object> #> attr(,\"xtab\") #> 3 x 4 sparse Matrix of class \"dgCMatrix\" #>     SPP_1 SPP_2 SPP_3 SPP_4 #> S_1     3     .     .     . #> S_2    10     3     .     . #> S_3     .     .     4     . #> attr(,\"samp\") #>      samples var1 #> S_1 Sample.1    1 #> S_2 Sample.2    2 #> S_3 Sample.3    1 #> attr(,\"taxa\") #>         specnames var2 #> SPP_1   Species.1    b #> SPP_2   Species.2    a #> SPP_3   Species.3    b #> SPP_4 zero.pseudo    a #> attr(,\"join\") #> [1] \"inner\"  ## transpose x5 #> Object of class \"Mefa\" #>   ..@ xtab: 3 x 4 sparse Matrix #>   ..@ samp: data frame with 2 variables #>   ..@ taxa: data frame with 2 variables #>   ..@ join: inner  t(x5) #> Object of class \"Mefa\" #>   ..@ xtab: 4 x 3 sparse Matrix #>   ..@ samp: data frame with 2 variables #>   ..@ taxa: data frame with 2 variables #>   ..@ join: inner  unclass(x5) #> <S4 Type Object> #> attr(,\"xtab\") #> 3 x 4 sparse Matrix of class \"dgCMatrix\" #>     SPP_1 SPP_2 SPP_3 SPP_4 #> S_1     3     .     .     . #> S_2    10     3     .     . #> S_3     .     .     4     . #> attr(,\"samp\") #>      samples var1 #> S_1 Sample.1    1 #> S_2 Sample.2    2 #> S_3 Sample.3    1 #> attr(,\"taxa\") #>         specnames var2 #> SPP_1   Species.1    b #> SPP_2   Species.2    a #> SPP_3   Species.3    b #> SPP_4 zero.pseudo    a #> attr(,\"join\") #> [1] \"inner\" unclass(t(x5)) #> <S4 Type Object> #> attr(,\"xtab\") #> 4 x 3 sparse Matrix of class \"dgCMatrix\" #>       S_1 S_2 S_3 #> SPP_1   3  10   . #> SPP_2   .   3   . #> SPP_3   .   .   4 #> SPP_4   .   .   . #> attr(,\"samp\") #>         specnames var2 #> SPP_1   Species.1    b #> SPP_2   Species.2    a #> SPP_3   Species.3    b #> SPP_4 zero.pseudo    a #> attr(,\"taxa\") #>      samples var1 #> S_1 Sample.1    1 #> S_2 Sample.2    2 #> S_3 Sample.3    1 #> attr(,\"join\") #> [1] \"inner\"  ## 0 and 1 row/col Mefa object x3[c(FALSE,FALSE,FALSE,FALSE),c(FALSE,FALSE,FALSE,FALSE)] #> Object of class \"Mefa\" #>   ..@ xtab: 0 x 0 sparse Matrix #>   ..@ samp: data frame with 2 variables #>   ..@ taxa: data frame with 2 variables #>   ..@ join: left  x3[c(TRUE,FALSE,FALSE,FALSE),c(FALSE,FALSE,FALSE,FALSE)] #> Object of class \"Mefa\" #>   ..@ xtab: 1 x 0 sparse Matrix #>   ..@ samp: data frame with 2 variables #>   ..@ taxa: data frame with 2 variables #>   ..@ join: left  x3[c(FALSE,FALSE,FALSE,FALSE),c(TRUE,FALSE,FALSE,FALSE)] #> Object of class \"Mefa\" #>   ..@ xtab: 0 x 1 sparse Matrix #>   ..@ samp: data frame with 2 variables #>   ..@ taxa: data frame with 2 variables #>   ..@ join: left  x3[c(TRUE,FALSE,FALSE,FALSE),c(TRUE,FALSE,FALSE,FALSE)] #> Object of class \"Mefa\" #>   ..@ xtab: 1 x 1 sparse Matrix #>   ..@ samp: data frame with 2 variables #>   ..@ taxa: data frame with 2 variables #>   ..@ join: left   ## stack stack(x3) #>                samp        taxa values samp_samples samp_var1 taxa_specnames #> Sample.1   Sample.1   Species.1      3     Sample.1         1      Species.1 #> Sample.2   Sample.2   Species.1     10     Sample.2         2      Species.1 #> Sample.3   Sample.3   Species.1      0     Sample.3         1      Species.1 #> Sample.4   Sample.4   Species.1      0     Sample.4         2      Species.1 #> Sample.1.1 Sample.1   Species.2      0     Sample.1         1      Species.2 #> Sample.2.1 Sample.2   Species.2      3     Sample.2         2      Species.2 #> Sample.3.1 Sample.3   Species.2      0     Sample.3         1      Species.2 #> Sample.4.1 Sample.4   Species.2      0     Sample.4         2      Species.2 #> Sample.1.2 Sample.1   Species.3      0     Sample.1         1      Species.3 #> Sample.2.2 Sample.2   Species.3      0     Sample.2         2      Species.3 #> Sample.3.2 Sample.3   Species.3      4     Sample.3         1      Species.3 #> Sample.4.2 Sample.4   Species.3      0     Sample.4         2      Species.3 #> Sample.1.3 Sample.1 zero.pseudo      0     Sample.1         1    zero.pseudo #> Sample.2.3 Sample.2 zero.pseudo      0     Sample.2         2    zero.pseudo #> Sample.3.3 Sample.3 zero.pseudo      0     Sample.3         1    zero.pseudo #> Sample.4.3 Sample.4 zero.pseudo      0     Sample.4         2    zero.pseudo #>            taxa_var2 #> Sample.1           b #> Sample.2           b #> Sample.3           b #> Sample.4           b #> Sample.1.1         a #> Sample.2.1         a #> Sample.3.1         a #> Sample.4.1         a #> Sample.1.2         b #> Sample.2.2         b #> Sample.3.2         b #> Sample.4.2         b #> Sample.1.3         a #> Sample.2.3         a #> Sample.3.3         a #> Sample.4.3         a"},{"path":"/reference/Melt.html","id":null,"dir":"Reference","previous_headings":"","what":"Melting Matrices — Melt","title":"Melting Matrices — Melt","text":"function reverses side effects cross tabulation.","code":""},{"path":"/reference/Melt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Melting Matrices — Melt","text":"","code":"Melt(x)"},{"path":"/reference/Melt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Melting Matrices — Melt","text":"x matrix, sparse matrix object, list sparse matrices identical dimnames, 'mefa' 'Mefa' object.","code":""},{"path":"/reference/Melt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Melting Matrices — Melt","text":"data frame columns corresponding rows, cols, possibly segm (names list x list sparse matrices), value. value numeric, columns factors.","code":""},{"path":"/reference/Melt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Melting Matrices — Melt","text":"Peter Solymos <solymos@ualberta.ca>","code":""},{"path":[]},{"path":"/reference/Melt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Melting Matrices — Melt","text":"","code":"xx <- data.frame(     sample = paste(\"Sample\", c(1,1,2,2,3,4), sep=\".\"),     species = c(paste(\"Species\", c(1,1,1,2,3), sep=\".\"),  \"zero.pseudo\"),     count = c(1,2,10,3,4,0),     segment = letters[c(6,13,6,13,6,6)],     stringsAsFactors = TRUE) xx #>     sample     species count segment #> 1 Sample.1   Species.1     1       f #> 2 Sample.1   Species.1     2       m #> 3 Sample.2   Species.1    10       f #> 4 Sample.2   Species.2     3       m #> 5 Sample.3   Species.3     4       f #> 6 Sample.4 zero.pseudo     0       f xx0 <- Xtab(count ~ sample + species, xx) xx1 <- Xtab(count ~ sample + species + segment, xx) (M1 <- Melt(xx0)) #>       rows      cols value #> 1 Sample.1 Species.1     3 #> 2 Sample.2 Species.1    10 #> 3 Sample.2 Species.2     3 #> 4 Sample.3 Species.3     4 Melt(as.matrix(xx0)) #>       rows      cols value #> 1 Sample.1 Species.1     3 #> 2 Sample.2 Species.1    10 #> 3 Sample.2 Species.2     3 #> 4 Sample.3 Species.3     4 (M2 <- Melt(xx1)) #>       rows      cols segm value #> 1 Sample.1 Species.1    f     1 #> 2 Sample.2 Species.1    f    10 #> 3 Sample.3 Species.3    f     4 #> 4 Sample.1 Species.1    m     2 #> 5 Sample.2 Species.2    m     3 stopifnot(identical(Xtab(value ~ rows + cols, M1), xx0)) stopifnot(identical(Xtab(value ~ rows + cols + segm, M2), xx1))"},{"path":"/reference/Xtab.html","id":null,"dir":"Reference","previous_headings":"","what":"Sparse Cross Tabulation — Xtab","title":"Sparse Cross Tabulation — Xtab","text":"Create contingency table cross-classifying factors, usually contained data frame, using formula interface.","code":""},{"path":"/reference/Xtab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sparse Cross Tabulation — Xtab","text":"","code":"Xtab(formula = ~., data = parent.frame(), rdrop, cdrop, subset, na.action, exclude = c(NA, NaN), drop.unused.levels = FALSE)"},{"path":"/reference/Xtab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sparse Cross Tabulation — Xtab","text":"formula formula object cross-classifying variables (separated +) right hand side (object can coerced formula). Interactions allowed. left hand side, one may optionally give vector matrix counts; latter case, columns interpreted corresponding levels variable. useful data already tabulated, see examples . data optional matrix data frame (similar: see model.frame) containing variables formula formula. default variables taken environment(formula). rdrop, cdrop logical (zero marginal rows/columns removed cross tabulation), character numeric (rows/columns removed). subset optional vector specifying subset observations used. na.action function indicates happen data contain NAs. exclude vector values excluded forming set levels classifying factors. drop.unused.levels logical indicating whether drop unused levels classifying factors. FALSE unused levels, table contain zero marginals, subsequent chi-squared test independence factors work.","code":""},{"path":"/reference/Xtab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sparse Cross Tabulation — Xtab","text":"function creates two- three-way cross tabulation. works two three factors. left hand side given formula, entries simply summed cells corresponding right hand side; also works left hand side give counts.","code":""},{"path":"/reference/Xtab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sparse Cross Tabulation — Xtab","text":"sparse numeric matrix inheriting sparseMatrix, specifically object S4 class dgCMatrix. three factors, list sparse matrices.","code":""},{"path":"/reference/Xtab.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sparse Cross Tabulation — Xtab","text":"function slight modification xtabs function stats package. Modified Peter Solymos <solymos@ualberta.ca>","code":""},{"path":[]},{"path":"/reference/Xtab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sparse Cross Tabulation — Xtab","text":"","code":"x <- data.frame(     sample = paste(\"Sample\", c(1,1,2,2,3,4), sep=\".\"),     species = c(paste(\"Species\", c(1,1,1,2,3), sep=\".\"),  \"zero.pseudo\"),     count = c(1,2,10,3,4,0),     stringsAsFactors = TRUE) x #>     sample     species count #> 1 Sample.1   Species.1     1 #> 2 Sample.1   Species.1     2 #> 3 Sample.2   Species.1    10 #> 4 Sample.2   Species.2     3 #> 5 Sample.3   Species.3     4 #> 6 Sample.4 zero.pseudo     0 ## Xtab class, counts by repetitions in RHS (x0 <- Xtab(~ sample + species, x)) #> 4 x 4 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 zero.pseudo #> Sample.1         2         .         .           . #> Sample.2         1         1         .           . #> Sample.3         .         .         1           . #> Sample.4         .         .         .           1 ## counts by LHS and repetitions in RHS (x1 <- Xtab(count ~ sample + species, x)) #> 4 x 4 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 zero.pseudo #> Sample.1         3         .         .           . #> Sample.2        10         3         .           . #> Sample.3         .         .         4           . #> Sample.4         .         .         .           . ## drop all empty rows (x2 <- Xtab(count ~ sample + species, x, cdrop=FALSE,rdrop=TRUE)) #> 3 x 4 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 zero.pseudo #> Sample.1         3         .         .           . #> Sample.2        10         3         .           . #> Sample.3         .         .         4           . ## drop all empty columns Xtab(count ~ sample + species, x, cdrop=TRUE,rdrop=FALSE) #> 4 x 3 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 #> Sample.1         3         .         . #> Sample.2        10         3         . #> Sample.3         .         .         4 #> Sample.4         .         .         . ## drop specific columns by placeholder Xtab(count ~ sample + species, x, cdrop=\"zero.pseudo\") #> 4 x 3 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 #> Sample.1         3         .         . #> Sample.2        10         3         . #> Sample.3         .         .         4 #> Sample.4         .         .         .  ## 2 and 3 way crosstabs xx <- data.frame(     sample = paste(\"Sample\", c(1,1,2,2,3,4), sep=\".\"),     species = c(paste(\"Species\", c(1,1,1,2,3), sep=\".\"),  \"zero.pseudo\"),     count = c(1,2,10,3,4,0),     segment = letters[c(6,13,6,13,6,6)],     stringsAsFactors = TRUE) xx #>     sample     species count segment #> 1 Sample.1   Species.1     1       f #> 2 Sample.1   Species.1     2       m #> 3 Sample.2   Species.1    10       f #> 4 Sample.2   Species.2     3       m #> 5 Sample.3   Species.3     4       f #> 6 Sample.4 zero.pseudo     0       f Xtab(count ~ sample + species, xx) #> 4 x 4 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 zero.pseudo #> Sample.1         3         .         .           . #> Sample.2        10         3         .           . #> Sample.3         .         .         4           . #> Sample.4         .         .         .           . Xtab(count ~ sample + species + segment, xx) #> $f #> 4 x 4 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 zero.pseudo #> Sample.1         1         .         .           . #> Sample.2        10         .         .           . #> Sample.3         .         .         4           . #> Sample.4         .         .         .           . #>  #> $m #> 4 x 4 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 zero.pseudo #> Sample.1         2         .         .           . #> Sample.2         .         3         .           . #> Sample.3         .         .         .           . #> Sample.4         .         .         .           . #>"},{"path":"/reference/abmibirds.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw Dataset of Bird Point Counts — abmibirds","title":"Raw Dataset of Bird Point Counts — abmibirds","text":"data set bird point counts collected Alberta Biodiversity Monitoring Institute (ABMI, https://www.abmi.ca).","code":""},{"path":"/reference/abmibirds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw Dataset of Bird Point Counts — abmibirds","text":"","code":"data(abmibirds)"},{"path":"/reference/abmibirds.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Raw Dataset of Bird Point Counts — abmibirds","text":"data frame 59341 observations following 21 variables. Rotation factor. Reference describing data       collected broad level.       Code definition: Prototype = 2003–2006, Rotation 1 = 2007–2012 ABMI.Site numeric vector. Reference number given       ABMI data collection site (1–1656). Year numeric vector. Collection year. Field.Date factor. Day, month, year data       collected. Field.Crew.Members factor. Initials field       technicians collecting field data. Identification.Date factor. Day, month, year       data analyzed specialist. Identification.Analyst factor. Initials       technicians/specialists identifying specimens. Point.Count.Station numeric vector. Point count       station recording made: 9 stations       located around ABMI site (1–9). Wind.Conditions factor. Estimate wind conditions       scale 0–5.       0 = wind, 1 = calm, 2 = leaves rustling, 3 small branches       moving, 4 = large branches moving, 5 = large branches moving       tree swaying Precipitation factor. Classification precipitation       conditions 5 categories.     Input value: Drizzle, Fog, Rain, Sleet, Snow, None Start..Point.Count factor. Time day recording       started.     Input value: 24 hour clock (hh:mm). End..Point.Count factor. Time day recording       finished. Input value: 24 hour clock (hh:mm). Common.Name factor. Common name bird species detected       point counts. Scientific.Name factor. Scientific name bird species       detected point count. Unique.Taxonomic.Identification.Number factor. Globally       unique identifier bird species detected point       count. Unique taxonomic identifiers generally taken       International Taxonomic Information System       (ITIS; https://www.itis.gov/). Taxonomic.Resolution factor. Resolution bird       species identified (e.g. Family, Genus, Species etc.). Time.First.Detected factor. Approximate time bird       analyst first detects bird species recording; listed 10-second intervals. Interval.1 factor. First time interval 10-minute       point count (0–200 seconds)       bird species detected identified. Interval.2 factor. Middle time interval 10-minute       point count (201–400 seconds) bird species detected       re-detected. Interval.3 factor. Last time interval 10-minute       point count (401–600 seconds) bird species detected       re-detected. Behaviour factor. Classification given species       detection (possible).","code":""},{"path":"/reference/abmibirds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raw Dataset of Bird Point Counts — abmibirds","text":"Breeding birds measured nine point count stations. Point count stations grid pattern point count station . 1 located site-centre remaining stations located 300 m apart surrounding site centre. conducted breeding bird surveys one half hour sunrise 10:00 hrs. recorded vocalizations birds 10 minutes point count station using omni-directional microphone (CZM microphone; River Forks Research Corp.) mounted ear level professional tripod connected mini hard drive recorder. recorded birds Marantz PM D670 PM D660 Solid State recorder 320 kbps .mp3 format. calibrated recorder volume mid ranges. conducting 10 minute bird recordings, scanned areas surrounding point count station birds (even vocalizing), noting species, number individuals (including flock sizes birds flying overhead), distance point count station, bird observations. also noted factors potentially bias bird recordings, wind speed precipitation. Bird recordings later analyzed bird identification specialists laboratory setting. bird point fell open water, established new point able get within 100 m original point, recording distance direction original point. possible get within 100 m original point (.e., <200 m last point), conducted 10 minute visual point count waterbody recording observations microphone. may sampled certain points inaccessible (e.g., stream made access hazardous impossible). analyzed bird recordings laboratory setting. identified species, time first detection (within 10 second intervals), behaviour (e.g., singing, calling, alarm-calling), time interval individual birds detected. recognized 3 time intervals: Interval 1 (0–200 seconds), Interval 2 (201–400 seconds), Interval 3 (401–600 seconds). Individual birds detected 1, 2, 3 time intervals. identified red squirrel (Tamiasciurus hudsonicus) vocalizations addition bird vocalizations. Bird recordings randomly sampled verified experts bird identification ensure accuracy. Throughout ABMI raw data files, following codes definitions applied. None 0: None 0 applied variable examined field crews found absent. None used text entries 0 used numerical entries. example, field crews examine canopy find Veteran trees canopy, recorded None. slope survey site, slope recorded 0. numeral 0 can also used nominal code, example, wind conditions can recorded 0. VNA Variable Applicable: ABMI data collected nested manner. example Tree Species parent variable. variable number child variables used describe parent variable detail (e.g., condition, DBH, decay stage). parent variable recorded None, child variables longer applied recorded VNA. VNA also used protocol calls modified sampling procedure based site conditions (e.g., surface substrate protocol variant hydric site conditions). use VNA implies users data expect data present. DNC, Collect: DNC used describe variables collected . number reasons data might collected (e.g., staff oversight, equipment failure, safety concerns, environmental conditions, time constraints). Regardless reason data collected, ideal conditions , record data entry file reads DNC. use DNC implies users expect data present, though . PNA, Protocol Available: ABMI's protocols , continue , implemented staged manner. result, collection many variables began years subsequent start prototype operational phases discontinued years trial. variable collected protocol yet implemented ABMI (discontinued ABMI), data entry record reads PNA. global constraint data (.e., protocol implemented 2006, therefore, previous years variable). PNA used describe lack data collection entire years. SNI, Species Identified: various fields related species identification, SNI used indicate organism identified. possible reasons identification possible include insufficient deficient sample collected lack field time.","code":""},{"path":"/reference/abmibirds.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Raw Dataset of Bird Point Counts — abmibirds","text":"RAW_T26BreedingBirds28621.csv, https://www.abmi.ca","code":""},{"path":"/reference/abmibirds.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Raw Dataset of Bird Point Counts — abmibirds","text":"Raw breeding bird data (2004–2006 inclusive) Alberta Biodiversity Monitoring Institute used, whole part, create product. information Institute can found : https://www.abmi.ca","code":""},{"path":"/reference/abmibirds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raw Dataset of Bird Point Counts — abmibirds","text":"","code":"data(abmibirds) str(abmibirds) #> 'data.frame':\t59341 obs. of  21 variables: #>  $ Rotation                              : Factor w/ 2 levels \"Prototype\",\"Rotation 1\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ ABMI.Site                             : int  630 630 630 630 630 630 630 630 630 630 ... #>  $ Year                                  : int  2003 2003 2003 2003 2003 2003 2003 2003 2003 2003 ... #>  $ Field.Date                            : Factor w/ 132 levels \"01-Jun-03\",\"01-Jun-04\",..: 46 46 46 46 46 46 46 46 46 46 ... #>  $ Field.Crew.Members                    : Factor w/ 67 levels \"ABL\",\"ABL/RSW\",..: 15 15 15 15 15 15 15 15 15 15 ... #>  $ Identification.Date                   : Factor w/ 135 levels \"01-Feb-10\",\"01-Jun-08\",..: 135 135 135 135 135 135 135 135 135 135 ... #>  $ Identification.Analyst                : Factor w/ 13 levels \"CF/CS/TH\",\"CLS/MBI\",..: 11 11 11 11 11 11 11 11 11 11 ... #>  $ Point.Count.Station                   : int  1 1 1 1 1 1 1 1 2 2 ... #>  $ Wind.Conditions                       : Factor w/ 7 levels \"0\",\"1\",\"2\",\"3\",..: 4 4 4 4 4 4 4 4 4 4 ... #>  $ Precipitation                         : Factor w/ 5 levels \"DNC\",\"Drizzle\",..: 4 4 4 4 4 4 4 4 4 4 ... #>  $ Start.of.Point.Count                  : Factor w/ 434 levels \"10:00\",\"10:01\",..: 152 152 152 152 152 152 152 152 178 178 ... #>  $ End.of.Point.Count                    : Factor w/ 42 levels \"10:07\",\"10:21\",..: 42 42 42 42 42 42 42 42 42 42 ... #>  $ Common.Name                           : Factor w/ 217 levels \"Accipiters\",\"Alder Flycatcher\",..: 184 184 142 142 142 150 208 161 208 181 ... #>  $ Scientific.Name                       : Factor w/ 218 levels \"Accipiter\",\"Accipiter gentilis\",..: 207 207 173 173 173 209 201 149 201 57 ... #>  $ Taxonomic.Resolution                  : Factor w/ 5 levels \"Family\",\"Genus\",..: 3 3 3 3 3 3 3 3 3 3 ... #>  $ Unique.Taxonomic.Identification.Number: Factor w/ 215 levels \"174469\",\"174479\",..: 130 130 214 214 214 149 122 161 122 195 ... #>  $ Time.First.Detected                   : Factor w/ 129 levels \".1\",\".2\",\".3\",..: 87 97 112 87 31 40 13 68 31 13 ... #>  $ Interval.1                            : Factor w/ 6 levels \"\",\"0\",\"1\",\"DNC\",..: 5 5 5 5 5 5 5 5 5 5 ... #>  $ Interval.2                            : Factor w/ 6 levels \"\",\"0\",\"1\",\"DNC\",..: 5 5 5 5 5 5 5 5 5 5 ... #>  $ Interval.3                            : Factor w/ 6 levels \"\",\"0\",\"1\",\"DNC\",..: 5 5 5 5 5 5 5 5 5 5 ... #>  $ Behaviour                             : Factor w/ 21 levels \"Alarm Calling\",..: 19 19 19 19 19 19 19 19 19 19 ..."},{"path":"/reference/find_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions for factors and compositional data — find_max","title":"Utility functions for factors and compositional data — find_max","text":"Utility functions factors compositional data.","code":""},{"path":"/reference/find_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions for factors and compositional data — find_max","text":"","code":"compare_sets(x, y) find_max(x) find_min(x) reclass(x, map, all = FALSE, allow_NA = FALSE) redistribute(x, source, target = NULL)"},{"path":"/reference/find_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions for factors and compositional data — find_max","text":"x, y type compare_sets, matrix find_max, find_min, redistribute, factor reclass. map reclassification matrix 2 columns (1st: original levels, 2nd: output levels mapped original levels). logical, whether levels mapping matrix applied return object. allow_NA logical, whether NAs allowed part map. source numeric character, single column index input matrix x. target numeric character, column index indices input matrix x.","code":""},{"path":"/reference/find_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility functions for factors and compositional data — find_max","text":"matrix compare_sets. data frame find_max find_min. reclassified factor reclass. matrix redistribute source column values redistributed among target columns proportionally.","code":""},{"path":"/reference/find_max.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Utility functions for factors and compositional data — find_max","text":"Peter Solymos <solymos@ualberta.ca>","code":""},{"path":[]},{"path":"/reference/find_max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility functions for factors and compositional data — find_max","text":"","code":"## numeric vector compare_sets(1:10, 8:15) #>        xlength ylength intersect union xbutnoty ybutnotx #> labels      10       8         3    15        7        5 #> unique      10       8         3    15        7        5 ## factor with 'zombie' labels compare_sets(factor(1:10, levels=1:10), factor(8:15, levels=1:15)) #>        xlength ylength intersect union xbutnoty ybutnotx #> labels      10      15        10    15        0        5 #> unique      10       8         3    15        7        5  (mat <- matrix(rnorm(10*5), 10, 5)) #>               [,1]        [,2]        [,3]       [,4]        [,5] #>  [1,] -1.400043517 -0.55369938  0.46815442  0.9353632  0.07003485 #>  [2,]  0.255317055  0.62898204  0.36295126  0.1764886 -0.63912332 #>  [3,] -2.437263611  2.06502490 -1.30454355  0.2436855 -0.04996490 #>  [4,] -0.005571287 -1.63098940  0.73777632  1.6235489 -0.25148344 #>  [5,]  0.621552721  0.51242695  1.88850493  0.1120381  0.44479712 #>  [6,]  1.148411606 -1.86301149 -0.09744510 -0.1339970  2.75541758 #>  [7,] -1.821817661 -0.52201251 -0.93584735 -1.9100875  0.04653138 #>  [8,] -0.247325302 -0.05260191 -0.01595031 -0.2792372  0.57770907 #>  [9,] -0.244199607  0.54299634 -0.82678895 -0.3134460  0.11819487 #> [10,] -0.282705449 -0.91407483 -1.51239965  1.0673079 -1.91172049 (m <- find_max(mat)) #>    index      value #> 1     X4 0.93536319 #> 2     X2 0.62898204 #> 3     X2 2.06502490 #> 4     X4 1.62354888 #> 5     X3 1.88850493 #> 6     X5 2.75541758 #> 7     X5 0.04653138 #> 8     X5 0.57770907 #> 9     X2 0.54299634 #> 10    X4 1.06730788 ## column indices as.integer(m$index) #>  [1] 4 2 2 4 3 5 5 5 2 4 find_min(mat) #>    index      value #> 1     X1 -1.4000435 #> 2     X5 -0.6391233 #> 3     X1 -2.4372636 #> 4     X2 -1.6309894 #> 5     X4  0.1120381 #> 6     X2 -1.8630115 #> 7     X4 -1.9100875 #> 8     X4 -0.2792372 #> 9     X3 -0.8267890 #> 10    X5 -1.9117205  map <- cbind(c(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"),              c(\"A\",\"B\",\"B\",\"C\",\"D\",\"D\",\"E\")) #x <- factor(sample(map[1:6,1], 100, replace=TRUE), levels=map[,1]) x <- as.factor(sample(map[1:6,1], 100, replace=TRUE)) x[2] <- NA table(x, reclass(x, map, all = FALSE), useNA=\"always\") #>        #> x       A  B  C  D <NA> #>   a    20  0  0  0    0 #>   b     0 17  0  0    0 #>   c     0 16  0  0    0 #>   d     0  0 18  0    0 #>   e     0  0  0 18    0 #>   f     0  0  0 10    0 #>   <NA>  0  0  0  0    1 table(x, reclass(x, map, all = TRUE), useNA=\"always\") #>        #> x       A  B  C  D  E <NA> #>   a    20  0  0  0  0    0 #>   b     0 17  0  0  0    0 #>   c     0 16  0  0  0    0 #>   d     0  0 18  0  0    0 #>   e     0  0  0 18  0    0 #>   f     0  0  0 10  0    0 #>   <NA>  0  0  0  0  0    1  map[c(4, 7), 2] <- NA table(x, reclass(x, map, all = FALSE, allow_NA = TRUE), useNA=\"always\") #>        #> x       A  B  D <NA> #>   a    20  0  0    0 #>   b     0 17  0    0 #>   c     0 16  0    0 #>   d     0  0  0   18 #>   e     0  0 18    0 #>   f     0  0 10    0 #>   <NA>  0  0  0    1 table(x, reclass(x, map, all = TRUE, allow_NA = TRUE), useNA=\"always\") #>        #> x       A  B  D <NA> #>   a    20  0  0    0 #>   b     0 17  0    0 #>   c     0 16  0    0 #>   d     0  0  0   18 #>   e     0  0 18    0 #>   f     0  0 10    0 #>   <NA>  0  0  0    1  (mat2 <- exp(mat) / rowSums(exp(mat))) #>              [,1]        [,2]       [,3]       [,4]       [,5] #>  [1,] 0.040831390 0.095182422 0.26444918 0.42193778 0.17759923 #>  [2,] 0.204093071 0.296557494 0.22728627 0.18862250 0.08344066 #>  [3,] 0.008346517 0.753050903 0.02590833 0.12185032 0.09084393 #>  [4,] 0.108918579 0.021438374 0.22905181 0.55541789 0.08517334 #>  [5,] 0.145234726 0.130220017 0.51558565 0.08725515 0.12170446 #>  [6,] 0.151466054 0.007455399 0.04357593 0.04201190 0.75549072 #>  [7,] 0.069027282 0.253232229 0.16741439 0.06319543 0.44713066 #>  [8,] 0.148679922 0.180642369 0.18738603 0.14401016 0.33928152 #>  [9,] 0.163250927 0.358699287 0.09116756 0.15232891 0.23455332 #> [10,] 0.170130393 0.090486058 0.04974306 0.65627407 0.03336642 (rmat2 <- redistribute(mat2, source = 1, target = 2:4)) #>       [,1]       [,2]       [,3]      [,4]       [,5] #>  [1,]    0 0.10015502 0.27826475 0.4439810 0.17759923 #>  [2,]    0 0.38150935 0.29239469 0.2426553 0.08344066 #>  [3,]    0 0.76002835 0.02614838 0.1229793 0.09084393 #>  [4,]    0 0.02433577 0.26000819 0.6304827 0.08517334 #>  [5,]    0 0.15601933 0.61773398 0.1045422 0.12170446 #>  [6,]    0 0.01959212 0.11451364 0.1104035 0.75549072 #>  [7,]    0 0.28935958 0.19129855 0.0722112 0.44713066 #>  [8,]    0 0.23309524 0.24179705 0.1858262 0.33928152 #>  [9,]    0 0.45594008 0.11588242 0.1936242 0.23455332 #> [10,]    0 0.10981357 0.06036801 0.7964520 0.03336642 colMeans(mat2) #> [1] 0.1209979 0.2186965 0.1801568 0.2432904 0.2368584 colMeans(rmat2) #> [1] 0.0000000 0.2529848 0.2198410 0.2903158 0.2368584 stopifnot(abs(sum(mat2) - sum(rmat2)) < 10^-6)"},{"path":"/reference/groupSums.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Summary Statistics of Data Subsets — groupSums","title":"Compute Summary Statistics of Data Subsets — groupSums","text":"Compute summary statistics (sums, means) data subsets.","code":""},{"path":"/reference/groupSums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Summary Statistics of Data Subsets — groupSums","text":"","code":"groupSums(object, ...) # S4 method for class 'matrix' groupSums(object, MARGIN, by, na.rm = FALSE, ...) # S4 method for class 'sparseMatrix' groupSums(object, MARGIN, by, na.rm = FALSE, ...) # S4 method for class 'Mefa' groupSums(object, MARGIN, by, replace, na.rm = FALSE, ...)  groupMeans(object, ...) # S4 method for class 'matrix' groupMeans(object, MARGIN, by, na.rm = FALSE, ...) # S4 method for class 'sparseMatrix' groupMeans(object, MARGIN, by, na.rm = FALSE, ...) # S4 method for class 'Mefa' groupMeans(object, MARGIN, by, replace, na.rm = FALSE, ...)  sum_by(x, by)"},{"path":"/reference/groupSums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Summary Statistics of Data Subsets — groupSums","text":"object object. x vector. MARGIN numeric, 1 indicates rows summed/averaged, 2 indicates columns summed/averaged. c(1, 2) yet implemented, can calculated calling function twice. vector grouping elements corresponding dimensions   object MARGIN. replace data frame used applying method   \"Mefa\" object. attribute table   corresponding MARGIN dropped (NULL),   replacement table can specified via argument. na.rm logical. missing values removed?   Sum calculated zeroing NA values,   mean calculated dividing sum number   non-NA values collapsing. ... argument, currently implemented.","code":""},{"path":"/reference/groupSums.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Summary Statistics of Data Subsets — groupSums","text":"method sums/averages cells matrix. functions behind methods use sparse matrices, calculations can efficient compared using aggregate.","code":""},{"path":"/reference/groupSums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Summary Statistics of Data Subsets — groupSums","text":"object similar input one.","code":""},{"path":"/reference/groupSums.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute Summary Statistics of Data Subsets — groupSums","text":"Peter Solymos <solymos@ualberta.ca>","code":""},{"path":[]},{"path":"/reference/groupSums.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Summary Statistics of Data Subsets — groupSums","text":"","code":"x <- data.frame(     sample = paste(\"Sample\", c(1,1,2,2,3,4), sep=\".\"),     species = c(paste(\"Species\", c(1,1,1,2,3), sep=\".\"),     \"zero.pseudo\"), count = c(1,2,10,3,4,0),     stringsAsFactors = TRUE) samp <- data.frame(samples=levels(x$sample), var1=1:2,     stringsAsFactors = TRUE) taxa <- data.frame(specnames=levels(x$species), var2=c(\"b\",\"a\"),     stringsAsFactors = TRUE) rownames(samp) <- samp$samples rownames(taxa) <- taxa$specnames x2 <- Xtab(count ~ sample + species, x, cdrop=FALSE,rdrop=TRUE) x5 <- Mefa(x2, samp, taxa, join=\"inner\")  groupSums(as.matrix(x2), 1, c(1,1,2)) #>   Species.1 Species.2 Species.3 zero.pseudo #> 1        13         3         0           0 #> 2         0         0         4           0 groupSums(as.matrix(x2), 2, c(1,1,2,2)) #>           1 2 #> Sample.1  3 0 #> Sample.2 13 0 #> Sample.3  0 4 groupSums(x2, 1, c(1,1,2)) #> 2 x 4 sparse Matrix of class \"dgCMatrix\" #>   Species.1 Species.2 Species.3 zero.pseudo #> 1        13         3         .           . #> 2         .         .         4           . groupSums(x2, 2, c(1,1,2,2)) #> 3 x 2 sparse Matrix of class \"dgCMatrix\" #>           1 2 #> Sample.1  3 . #> Sample.2 13 . #> Sample.3  . 4 groupSums(x5, 1, c(1,1,2)) #> Object of class \"Mefa\" #>   ..@ xtab: 2 x 4 sparse Matrix #>   ..@ samp: NULL #>   ..@ taxa: data frame with 2 variables #>   ..@ join: inner  groupSums(x5, 2, c(1,1,2,2)) #> Object of class \"Mefa\" #>   ..@ xtab: 3 x 2 sparse Matrix #>   ..@ samp: data frame with 2 variables #>   ..@ taxa: NULL #>   ..@ join: inner   groupMeans(as.matrix(x2), 1, c(1,1,2)) #>   Species.1 Species.2 Species.3 zero.pseudo #> 1       6.5       1.5         0           0 #> 2       0.0       0.0         4           0 groupMeans(as.matrix(x2), 2, c(1,1,2,2)) #>            1 2 #> Sample.1 1.5 0 #> Sample.2 6.5 0 #> Sample.3 0.0 2 groupMeans(x2, 1, c(1,1,2)) #> 2 x 4 sparse Matrix of class \"dgCMatrix\" #>   Species.1 Species.2 Species.3 zero.pseudo #> 1       6.5       1.5         .           . #> 2       .         .           4           . groupMeans(x2, 2, c(1,1,2,2)) #> 3 x 2 sparse Matrix of class \"dgCMatrix\" #>            1 2 #> Sample.1 1.5 . #> Sample.2 6.5 . #> Sample.3 .   2 groupMeans(x5, 1, c(1,1,2)) #> Object of class \"Mefa\" #>   ..@ xtab: 2 x 4 sparse Matrix #>   ..@ samp: NULL #>   ..@ taxa: data frame with 2 variables #>   ..@ join: inner  groupMeans(x5, 2, c(1,1,2,2)) #> Object of class \"Mefa\" #>   ..@ xtab: 3 x 2 sparse Matrix #>   ..@ samp: data frame with 2 variables #>   ..@ taxa: NULL #>   ..@ join: inner   sum_by(runif(100, 0, 1), sample(LETTERS[1:4], 100, replace=TRUE)) #>           x by #> C 17.099100 29 #> A  7.992116 18 #> D 14.054393 29 #> B 12.379071 24"},{"path":"/reference/mbind.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine R Objects by Rows and Columns — mbind","title":"Combine R Objects by Rows and Columns — mbind","text":"Combine R objects rows columns.","code":""},{"path":"/reference/mbind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine R Objects by Rows and Columns — mbind","text":"","code":"mbind(x, y, fill, ...) mbind2(x, y, fill, ...)"},{"path":"/reference/mbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine R Objects by Rows and Columns — mbind","text":"x, y objects combine, see Details. fill numeric value NA (default) fill outer set (part union) dimnames. ... argument, used.","code":""},{"path":"/reference/mbind.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine R Objects by Rows and Columns — mbind","text":"x y combined left join manner, meaning elements x retained, non-overlapping elements y used. Elements returning object part x y (outer set) filled fill. relational table x NULL, corresponding values table y used. mbind2 combines x y inner set calculated sum corresponding elements x y (unlike mbind left join manner).","code":""},{"path":"/reference/mbind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine R Objects by Rows and Columns — mbind","text":"object similar input one.","code":""},{"path":"/reference/mbind.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine R Objects by Rows and Columns — mbind","text":"Peter Solymos <solymos@ualberta.ca>","code":""},{"path":[]},{"path":"/reference/mbind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine R Objects by Rows and Columns — mbind","text":"","code":"x=matrix(1:4,2,2) rownames(x) <- c(\"a\",\"b\") colnames(x) <- c(\"A\",\"B\") y=matrix(11:14,2,2) rownames(y) <- c(\"b\",\"c\") colnames(y) <- c(\"B\",\"C\")  sampx <- data.frame(x1=1:2, x2=2:1,     stringsAsFactors = TRUE) rownames(sampx) <- rownames(x) sampy <- data.frame(x1=3:4, x3=10:11,     stringsAsFactors = TRUE) rownames(sampy) <- rownames(y) taxay <- data.frame(x1=1:2, x2=2:1,     stringsAsFactors = TRUE) rownames(taxay) <- colnames(y) taxax <- NULL  mbind(x,y) #>    A  B  C #> a  1  3 NA #> b  2  4 13 #> c NA 12 14 mbind(as(x,\"sparseMatrix\"),as(y,\"sparseMatrix\")) #> 3 x 3 sparse Matrix of class \"dgCMatrix\" #>    A  B  C #> a  1  3 NA #> b  2  4 13 #> c NA 12 14 xy <- mbind(Mefa(x,sampx),Mefa(y,sampy,taxay)) unclass(xy) #> <S4 Type Object> #> attr(,\"xtab\") #> 3 x 3 sparse Matrix of class \"dgCMatrix\" #>    A  B  C #> a  1  3 NA #> b  2  4 13 #> c NA 12 14 #> attr(,\"samp\") #>   x1 x2 x3 #> a  1  2 NA #> b  2  1 10 #> c  4 NA 11 #> attr(,\"taxa\") #>   x1 x2 #> A NA NA #> B  1  2 #> C  2  1 #> attr(,\"join\") #> [1] \"left\"  mbind2(x,y) #>    A  B  C #> a  1  3 NA #> b  2 15 13 #> c NA 12 14 mbind2(as(x,\"sparseMatrix\"),as(y,\"sparseMatrix\")) #> 3 x 3 sparse Matrix of class \"dgCMatrix\" #>    A  B  C #> a  1  3 NA #> b  2 15 13 #> c NA 12 14 xtab(xy) <- mbind2(x, y) unclass(xy) #> <S4 Type Object> #> attr(,\"xtab\") #> 3 x 3 sparse Matrix of class \"dgCMatrix\" #>    A  B  C #> a  1  3 NA #> b  2 15 13 #> c NA 12 14 #> attr(,\"samp\") #>   x1 x2 x3 #> a  1  2 NA #> b  2  1 10 #> c  4 NA 11 #> attr(,\"taxa\") #>   x1 x2 #> A NA NA #> B  1  2 #> C  2  1 #> attr(,\"join\") #> [1] \"left\""},{"path":"/reference/mefa4-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate Data Handling with S4 Classes and Sparse Matrices — mefa4-package","title":"Multivariate Data Handling with S4 Classes and Sparse Matrices — mefa4-package","text":"S4 update 'mefa' package using sparse matrices enhanced efficiency.","code":""},{"path":"/reference/mefa4-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multivariate Data Handling with S4 Classes and Sparse Matrices — mefa4-package","text":"S4 update 'mefa' package using sparse matrices enhanced efficiency. Sparse array-like objects supported via lists sparse matrices. Main functions: Xtab, Mefa. Accessor replacement functions: xtab, samp, taxa. Methods: mbind, groupSums, groupMeans. Coercion methods virtual classes defined cross compatibility mefa package. S4 object classes described Mefa help page. vignette vignette(\"mefa4\") gives overview package, gives comparison S3 S4 object classes, presents performance review.","code":""},{"path":"/reference/mefa4-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Multivariate Data Handling with S4 Classes and Sparse Matrices — mefa4-package","text":"Peter Solymos Maintainer: Peter Solymos <solymos@ualberta.ca>","code":""},{"path":"/reference/mefa4-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Multivariate Data Handling with S4 Classes and Sparse Matrices — mefa4-package","text":"Solymos P. (2008) mefa: R package handling reporting count data. Community Ecology 9, 125–127. Solymos P. (2009) Processing ecological data R mefa package. Journal Statistical Software 29(8), 1–28. doi:10.18637/jss.v029.i08","code":""},{"path":[]},{"path":"/reference/mefa4-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multivariate Data Handling with S4 Classes and Sparse Matrices — mefa4-package","text":"","code":"if (FALSE) { # \\dontrun{ vignette(\"mefa4\") } # }"},{"path":"/reference/nameAlnum.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions, mostly for character manipulation — nameAlnum","title":"Utility functions, mostly for character manipulation — nameAlnum","text":"Utility functions, mostly character manipulation.","code":""},{"path":"/reference/nameAlnum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions, mostly for character manipulation — nameAlnum","text":"","code":"pasteDate(..., sep = \" \", collapse = NULL, sep.date = sep) paste0date(..., collapse = NULL) nameAlnum(x, capitalize=c(\"asis\", \"first\", \"none\", \"all\", \"mixed\"),     collapse=\" \") normalizeNames(x, pattern = list(\" \"), replacement = list(\"_\"),     alnum = FALSE, ...)"},{"path":"/reference/nameAlnum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions, mostly for character manipulation — nameAlnum","text":"x caharacter. ... one R objects, converted character vectors. normalizeNames takes arguments passed nameAlnum alnum = TRUE. sep character string separate terms. collapse optional character string separate results. nameAlnum separator words output. sep.date character string separate terms data . capitalize character, letter words capitalized. \"mixed\" capitalizes first letter case unchanged rest (CamelCase). \"first\" capitalizes first letter uses lower case rest. options self explanatory. pattern list character vectors replaced. Must match argument replacement. replacement list character vectors replacements pattern. Must match argument pattern. alnum logical, nameAlnum applied replacement.","code":""},{"path":"/reference/nameAlnum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility functions, mostly for character manipulation — nameAlnum","text":"Character vector desired changes.","code":""},{"path":"/reference/nameAlnum.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Utility functions, mostly for character manipulation — nameAlnum","text":"Peter Solymos <solymos@ualberta.ca>","code":""},{"path":[]},{"path":"/reference/nameAlnum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility functions, mostly for character manipulation — nameAlnum","text":"","code":"paste0(pasteDate(\"file\", \"name\", sep=\"-\", sep.date=\"_\"), \".csv\") #> [1] \"file-name_2024-09-24.csv\" paste0(paste0date(\"file\", \"name\", sep.date=\"_\"), \".csv\") #> [1] \"filename_2024-09-24.csv\"  data(abmibirds) x <- data.frame(Name=levels(abmibirds[[\"Common.Name\"]]),     NameAlnum=nameAlnum(levels(abmibirds[[\"Common.Name\"]])),     stringsAsFactors = TRUE) x[grep(\"'\", x$Name),] #>                              Name                   NameAlnum #> 14                Baird's Sparrow              Bairds Sparrow #> 21             Barrow's Goldeneye           Barrows Goldeneye #> 38               Bonaparte's Gull             Bonapartes Gull #> 41             Brewer's Blackbird           Brewers Blackbird #> 42               Brewer's Sparrow             Brewers Sparrow #> 86                 Forster's Tern               Forsters Tern #> 88                Franklin's Gull              Franklins Gull #> 103          Hammond's Flycatcher         Hammonds Flycatcher #> 112            Le Conte's Sparrow           Le Contes Sparrow #> 117             Lincoln's Sparrow            Lincolns Sparrow #> 123             Mccown's Longspur            Mccowns Longspur #> 130 Nelson's Sharp-tailed Sparrow Nelsons Sharptailed Sparrow #> 170                  Say's Phoebe                 Says Phoebe #> 179               Sprague's Pipit              Spragues Pipit #> 181             Swainson's Thrush            Swainsons Thrush #> 206            Wilson's Phalarope           Wilsons Phalarope #> 207              Wilson's Warbler             Wilsons Warbler  data.frame(out=sapply(c(\"asis\", \"first\", \"none\", \"all\", \"mixed\"),     function(z) nameAlnum(\"Olive-sided Flycatcher\", z)),     stringsAsFactors = TRUE) #>                         out #> asis  Olivesided Flycatcher #> first Olivesided Flycatcher #> none  olivesided flycatcher #> all   OLIVESIDED FLYCATCHER #> mixed Olivesided Flycatcher  z <- data.frame(Name=levels(abmibirds[[\"Common.Name\"]]),     NameNormalized=normalizeNames(levels(abmibirds[[\"Common.Name\"]]),         pattern=list(\"'\", \"-\", \" \"), replacement=list(\"\", \"_\", \"_\")),     stringsAsFactors = TRUE) z[grepl(\"'\", z$Name) & grepl(\"-\", z$Name),] #>                              Name               NameNormalized #> 130 Nelson's Sharp-tailed Sparrow Nelsons_Sharp_tailed_Sparrow"},{"path":"/reference/nonDuplicated.html","id":null,"dir":"Reference","previous_headings":"","what":"Non Duplicated Rows in Data Frame — nonDuplicated","title":"Non Duplicated Rows in Data Frame — nonDuplicated","text":"Subset data frame using non duplicated elements vector.","code":""},{"path":"/reference/nonDuplicated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non Duplicated Rows in Data Frame — nonDuplicated","text":"","code":"nonDuplicated(x, y, change.rownames = FALSE, na.rm = FALSE)"},{"path":"/reference/nonDuplicated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non Duplicated Rows in Data Frame — nonDuplicated","text":"x data frame. y vector. can name column x without quotes. change.rownames original rownames x replaced unique non duplicated values y. na.rm logical. rows removed y NA. applied values y used rownames setting change.rownames = TRUE","code":""},{"path":"/reference/nonDuplicated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Non Duplicated Rows in Data Frame — nonDuplicated","text":"function handy keep one set duplicated data common long formatted database files.","code":""},{"path":"/reference/nonDuplicated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Non Duplicated Rows in Data Frame — nonDuplicated","text":"data frame.","code":""},{"path":"/reference/nonDuplicated.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Non Duplicated Rows in Data Frame — nonDuplicated","text":"Peter Solymos <solymos@ualberta.ca>","code":""},{"path":[]},{"path":"/reference/nonDuplicated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Non Duplicated Rows in Data Frame — nonDuplicated","text":"","code":"data(abmibirds) x <- nonDuplicated(abmibirds, abmibirds$ABMI.Site, TRUE) ## or equivalently #x <- nonDuplicated(abmibirds, ABMI.Site, TRUE) dim(abmibirds) #> [1] 59341    21 dim(x) #> [1] 330  21 length(unique(abmibirds$ABMI.Site)) #> [1] 330"},{"path":"/reference/notin.html","id":null,"dir":"Reference","previous_headings":"","what":"Negated Value Matching — %notin%","title":"Negated Value Matching — %notin%","text":"%notin% negation %%, returns logical vector indicating non-match left operand.","code":""},{"path":"/reference/notin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Negated Value Matching — %notin%","text":"","code":"x %notin% table"},{"path":"/reference/notin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Negated Value Matching — %notin%","text":"x vector NULL: values matched. table vector NULL: values matched .","code":""},{"path":"/reference/notin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Negated Value Matching — %notin%","text":"logical vector, indicating non-match located element x: thus values TRUE FALSE never NA.","code":""},{"path":"/reference/notin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Negated Value Matching — %notin%","text":"Peter Solymos <solymos@ualberta.ca>","code":""},{"path":[]},{"path":"/reference/notin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Negated Value Matching — %notin%","text":"","code":"1:10 %notin% c(1,3,5,9) #>  [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE sstr <- c(\"c\",\"ab\",\"B\",\"bba\",\"c\",NA,\"@\",\"bla\",\"a\",\"Ba\",\"%\") sstr[sstr %notin% c(letters, LETTERS)] #> [1] \"ab\"  \"bba\" NA    \"@\"   \"bla\" \"Ba\"  \"%\""},{"path":"/reference/r2rmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse R source file and return R markdown — r2rmd","title":"Parse R source file and return R markdown — r2rmd","text":"Parses R source file returns R markdown document can turned human readable documentation source file .","code":""},{"path":"/reference/r2rmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse R source file and return R markdown — r2rmd","text":"","code":"r2rmd(file, out=paste(file, \"md\", sep=\"\"), header=TRUE, extra)"},{"path":"/reference/r2rmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse R source file and return R markdown — r2rmd","text":"file file name connection (see readLines. output file name passed writeLines, NULL (file written). header logical, yaml header (enclosed triple dashes, ---) parsed. extra character, optional string placed code chunk openings.","code":""},{"path":"/reference/r2rmd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse R source file and return R markdown — r2rmd","text":"Leading double hashes ## treated non-code. Leading # followed # code comment. Leading # whitespace code comment. newline code preceded followed code. leading double hash ## trimmed comment lines. R markdown chunk start/end stuff added code chunks. argument extra adds chunk arguments, e.g. extra=', eval=FALSE' etc. See R markdown website https://rmarkdown.rstudio.com/","code":""},{"path":"/reference/r2rmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse R source file and return R markdown — r2rmd","text":"Returns character vector invisibly, writes file side effects unless =NULL case file written.","code":""},{"path":"/reference/r2rmd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parse R source file and return R markdown — r2rmd","text":"Peter Solymos <solymos@ualberta.ca>","code":""},{"path":[]},{"path":"/reference/r2rmd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse R source file and return R markdown — r2rmd","text":"","code":"if (FALSE) { # \\dontrun{ (r2rmd(system.file(\"r2rmd_example.R\", package=\"mefa4\"),      out=NULL, extra=\", eval=FALSE\")) } # }"},{"path":"/reference/samp.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessing and Replacing Parts of 'Mefa' Objects — samp","title":"Accessing and Replacing Parts of 'Mefa' Objects — samp","text":"Methods access replace parts (elements, slots) \"Mefa\" objects.","code":""},{"path":"/reference/samp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessing and Replacing Parts of 'Mefa' Objects — samp","text":"","code":"xtab(x) `xtab<-`(x, value)  samp(x) `samp<-`(x, value)  taxa(x) `taxa<-`(x, value)"},{"path":"/reference/samp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessing and Replacing Parts of 'Mefa' Objects — samp","text":"x object S4 class \"Mefa\". value replacement value.","code":""},{"path":"/reference/samp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessing and Replacing Parts of 'Mefa' Objects — samp","text":"[ method ensures xtab sparse matrix part corresponding attribute tables subsetted correctly. Validity check performed replacing slots object.","code":""},{"path":"/reference/samp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessing and Replacing Parts of 'Mefa' Objects — samp","text":"object S4 class \"Mefa\".","code":""},{"path":"/reference/samp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessing and Replacing Parts of 'Mefa' Objects — samp","text":"Peter Solymos <solymos@ualberta.ca>","code":""},{"path":[]},{"path":"/reference/samp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessing and Replacing Parts of 'Mefa' Objects — samp","text":"","code":"x <- data.frame(     sample = paste(\"Sample\", c(1,1,2,2,3,4), sep=\".\"),     species = c(paste(\"Species\", c(1,1,1,2,3), sep=\".\"),  \"zero.pseudo\"),     count = c(1,2,10,3,4,0),     stringsAsFactors = TRUE) samp <- data.frame(samples=levels(x$sample), var1=1:2,     stringsAsFactors = TRUE) taxa <- data.frame(specnames=levels(x$species), var2=c(\"b\",\"a\"),     stringsAsFactors = TRUE) rownames(samp) <- samp$samples rownames(taxa) <- taxa$specnames x1 <- Xtab(count ~ sample + species, x) x3 <- Mefa(x1, samp, taxa)  ## accessing the xtab slot xtab(x3) #> 4 x 4 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 zero.pseudo #> Sample.1         3         .         .           . #> Sample.2        10         3         .           . #> Sample.3         .         .         4           . #> Sample.4         .         .         .           . ## replacing the slot value x1[3,1] <- 999 xtab(x3) <- x1 xtab(x3) #> 4 x 4 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 zero.pseudo #> Sample.1         3         .         .           . #> Sample.2        10         3         .           . #> Sample.3       999         .         4           . #> Sample.4         .         .         .           .  ## accessing and replacing the samp slot samp(x3) #>           samples var1 #> Sample.1 Sample.1    1 #> Sample.2 Sample.2    2 #> Sample.3 Sample.3    1 #> Sample.4 Sample.4    2 samp(x3) <- NULL samp(x3) #> NULL samp(x3) <- samp[1:3,] samp(x3) #>           samples var1 #> Sample.1 Sample.1    1 #> Sample.2 Sample.2    2 #> Sample.3 Sample.3    1 #> Sample.4     <NA>   NA  ## accessing and replacing the taxa slot taxa(x3) #>               specnames var2 #> Species.1     Species.1    b #> Species.2     Species.2    a #> Species.3     Species.3    b #> zero.pseudo zero.pseudo    a taxa(x3) <- NULL taxa(x3) #> NULL taxa(x3) <- taxa[1:3,] taxa(x3) #>             specnames var2 #> Species.1   Species.1    b #> Species.2   Species.2    a #> Species.3   Species.3    b #> zero.pseudo      <NA> <NA>  ## subsetting unclass(x3[3:2, 1:2]) #> <S4 Type Object> #> attr(,\"xtab\") #> 2 x 2 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 #> Sample.3       999         . #> Sample.2        10         3 #> attr(,\"samp\") #>           samples var1 #> Sample.3 Sample.3    1 #> Sample.2 Sample.2    2 #> attr(,\"taxa\") #>           specnames var2 #> Species.1 Species.1    b #> Species.2 Species.2    a #> attr(,\"join\") #> [1] \"left\" unclass(x3[3:2,]) #> <S4 Type Object> #> attr(,\"xtab\") #> 2 x 4 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 Species.3 zero.pseudo #> Sample.3       999         .         4           . #> Sample.2        10         3         .           . #> attr(,\"samp\") #>           samples var1 #> Sample.3 Sample.3    1 #> Sample.2 Sample.2    2 #> attr(,\"taxa\") #>             specnames var2 #> Species.1   Species.1    b #> Species.2   Species.2    a #> Species.3   Species.3    b #> zero.pseudo      <NA> <NA> #> attr(,\"join\") #> [1] \"left\" unclass(x3[,1:2]) #> <S4 Type Object> #> attr(,\"xtab\") #> 4 x 2 sparse Matrix of class \"dgCMatrix\" #>          Species.1 Species.2 #> Sample.1         3         . #> Sample.2        10         3 #> Sample.3       999         . #> Sample.4         .         . #> attr(,\"samp\") #>           samples var1 #> Sample.1 Sample.1    1 #> Sample.2 Sample.2    2 #> Sample.3 Sample.3    1 #> Sample.4     <NA>   NA #> attr(,\"taxa\") #>           specnames var2 #> Species.1 Species.1    b #> Species.2 Species.2    a #> attr(,\"join\") #> [1] \"left\""},{"path":"/news/index.html","id":"version-03-11--may-20-2024","dir":"Changelog","previous_headings":"","what":"Version 0.3-11 – May 20, 2024","title":"Version 0.3-11 – May 20, 2024","text":"CRAN release: 2024-05-20 Use bibentry CITATION.","code":""},{"path":"/news/index.html","id":"version-03-10--may-19-2024","dir":"Changelog","previous_headings":"","what":"Version 0.3-10 – May 19, 2024","title":"Version 0.3-10 – May 19, 2024","text":"Maintainer email changed personal email.","code":""},{"path":"/news/index.html","id":"version-03-9--sep-8-2022","dir":"Changelog","previous_headings":"","what":"Version 0.3-9 – Sep 8, 2022","title":"Version 0.3-9 – Sep 8, 2022","text":"CRAN release: 2022-09-12 Addressing Matrix 1.5-0 deprecation issue.","code":""},{"path":"/news/index.html","id":"version-03-8--oct-6-2021","dir":"Changelog","previous_headings":"","what":"Version 0.3-8 – Oct 6, 2021","title":"Version 0.3-8 – Oct 6, 2021","text":"CRAN release: 2021-10-06 Use DOI JSS article instead URL. # Version 0.3-7 – Feb 28, 2020 stringsAsFactors = TRUE added data.frame() calls prepare R-devel changes.","code":""},{"path":"/news/index.html","id":"version-03-6--jul-20-2019","dir":"Changelog","previous_headings":"","what":"Version 0.3-6 – Jul 20, 2019","title":"Version 0.3-6 – Jul 20, 2019","text":"CRAN release: 2019-06-21 find_max find_min much now faster.","code":""},{"path":"/news/index.html","id":"version-03-5--mar-24-2018","dir":"Changelog","previous_headings":"","what":"Version 0.3-5 – Mar 24, 2018","title":"Version 0.3-5 – Mar 24, 2018","text":"CRAN release: 2018-03-25 sum_by sum vector grouping indices. Melt uses unique colnames avoid duplicate factor levels warning. rBind cBind deprecated rbind/cbind used (https://stat.ethz.ch/pipermail/r-devel/2018-March/075737.html), package now depends R (>= 3.2.0).","code":""},{"path":"/news/index.html","id":"version-03-4--oct-12-2016","dir":"Changelog","previous_headings":"","what":"Version 0.3-4 – Oct 12, 2016","title":"Version 0.3-4 – Oct 12, 2016","text":"CRAN release: 2016-10-14 New functions: '%notin%', negation '%%'; reclass reclassifying factors; redistribute redistributing values matrix. inst/CITATION file updated.","code":""},{"path":"/news/index.html","id":"version-03-3--feb-29-2016","dir":"Changelog","previous_headings":"","what":"Version 0.3-3 – Feb 29, 2016","title":"Version 0.3-3 – Feb 29, 2016","text":"CRAN release: 2016-03-01 nonDuplicated now uses drop=FALSE prevent 1-column inputs loose dimensions. New function: compare_sets compare sets. New function: find_max find_min find max/min index value rows matrix. pbapply now dependency.","code":""},{"path":"/news/index.html","id":"version-03-2--nov-21-2015","dir":"Changelog","previous_headings":"","what":"Version 0.3-2 – Nov 21, 2015","title":"Version 0.3-2 – Nov 21, 2015","text":"CRAN release: 2015-11-22 New function: r2rmd parse ordinary R source file return Rmd file trimming double hashes wrapping code chunks. Vignette removed package, migrated development site GitHub.","code":""},{"path":"/news/index.html","id":"version-03-1--nov-7-2013","dir":"Changelog","previous_headings":"","what":"Version 0.3-1 – Nov 7, 2013","title":"Version 0.3-1 – Nov 7, 2013","text":"CRAN release: 2014-05-16 stack method Mefa objects: column labels @taxa tables fixed. New functions: pasteDate, paste0date, nameAlnum. added facilitate common character operations (versioning files, cleaning taxonomic names).","code":""},{"path":"/news/index.html","id":"version-03-0--sept-25-2013","dir":"Changelog","previous_headings":"","what":"Version 0.3-0 – Sept 25, 2013","title":"Version 0.3-0 – Sept 25, 2013","text":"CRAN release: 2013-10-08 Spell check completed using utils:::aspell. Import methods pkg namespace satisfy R 3.0.2 checks. Depends: R (>= 2.14.0) vignette directory moved.","code":""},{"path":"/news/index.html","id":"version-02-9--july-11-2013","dir":"Changelog","previous_headings":"","what":"Version 0.2-9 – July 11, 2013","title":"Version 0.2-9 – July 11, 2013","text":"CRAN release: 2013-07-11 Xtab: 1-row/col matrices dropped dimnames – now fixed. Vignette moved vignettes inst/doc.","code":""},{"path":"/news/index.html","id":"version-02-8--july-6-2012","dir":"Changelog","previous_headings":"","what":"Version 0.2-8 – July 6, 2012","title":"Version 0.2-8 – July 6, 2012","text":"CRAN release: 2012-07-07 mbind2: inner set based x+y instead left join x. Methods matrix sparse matrix classes, Mefa sum trivial. nonDuplicated gained na.rm argument handle possible duplicates row names.","code":""},{"path":"/news/index.html","id":"version-02-7--may-2-2012","dir":"Changelog","previous_headings":"","what":"Version 0.2-7 – May 2, 2012","title":"Version 0.2-7 – May 2, 2012","text":"CRAN release: 2012-05-14 inst/COPYING removed. stack method added Mefa class. groupSums, groupMeans: failed join \"inner\" @samp @taxa slots new object NULL. Check NULL attribute table related join type now relaxed object class Mefa (reported D. Stralberg). mbind uses drop=TRUE protect single column/row cases.","code":""},{"path":"/news/index.html","id":"version-02-6--march-19-2012","dir":"Changelog","previous_headings":"","what":"Version 0.2-6 – March 19, 2012","title":"Version 0.2-6 – March 19, 2012","text":"CRAN release: 2012-03-19 Rd link Matrix:::xtabs removed (sparse=TRUE stats:::xtabs). Reported Uwe Ligges.","code":""},{"path":"/news/index.html","id":"version-02-5--october-18-2011","dir":"Changelog","previous_headings":"","what":"Version 0.2-5 – October 18, 2011","title":"Version 0.2-5 – October 18, 2011","text":"Startup message: line break removed.","code":""},{"path":"/news/index.html","id":"version-02-4--august-23-2011","dir":"Changelog","previous_headings":"","what":"Version 0.2-4 – August 23, 2011","title":"Version 0.2-4 – August 23, 2011","text":"CRAN release: 2011-10-17 groupMeans: NA handling changed, mean calculated dividing non-NA values collapsing.","code":""},{"path":"/news/index.html","id":"version-02-3--july-9-2011","dir":"Changelog","previous_headings":"","what":"Version 0.2-3 – July 9, 2011","title":"Version 0.2-3 – July 9, 2011","text":"CRAN release: 2011-08-23 packageStartupMessage used zzz.R .onAttach. Typos fixed vignette help pages. 1x1 dim issues fixed using drop=FALSE many places (Mefa, <-, [, mbind). typo corrected mbind Mefa objects left TAXAPART temp variable result. @samp/@taxa table handling mbind Mefa objects revised, using default merge(..., =TRUE). Xtab: lhs must numeric.","code":""},{"path":"/news/index.html","id":"version-02-2--may-13-2011","dir":"Changelog","previous_headings":"","what":"Version 0.2-2 – May 13, 2011","title":"Version 0.2-2 – May 13, 2011","text":"CRAN release: 2011-07-23 Allowing 0 1 row/col Mefa objects ('xtab<-' '['). nonDuplicated finds y data frame patent frame first.","code":""},{"path":"/news/index.html","id":"version-02-1--february-14-2011","dir":"Changelog","previous_headings":"","what":"Version 0.2-1 – February 14, 2011","title":"Version 0.2-1 – February 14, 2011","text":"CRAN release: 2011-05-15 Melt function added reverse side effects Xtab. Docs Melt added (Rd, tests, vignette).","code":""},{"path":"/news/index.html","id":"version-02-0--february-7-2011","dir":"Changelog","previous_headings":"","what":"Version 0.2-0 – February 7, 2011","title":"Version 0.2-0 – February 7, 2011","text":"CRAN release: 2011-02-10 First public CRAN release.","code":""},{"path":"/news/index.html","id":"version-01-2--january-26-2011","dir":"Changelog","previous_headings":"","what":"Version 0.1-2 – January 26, 2011","title":"Version 0.1-2 – January 26, 2011","text":"nonDuplicated function added. segmented Xtab output implemented list sparse matrices.","code":""},{"path":"/news/index.html","id":"version-01-1--january-25-2011","dir":"Changelog","previous_headings":"","what":"Version 0.1-1 – January 25, 2011","title":"Version 0.1-1 – January 25, 2011","text":"S4 classes working properly. /tests dir added pkg tree. Xtab class redundant, use dgCMatrix class instead. vignette design decisions added, also performance comparison. mbind method binding matrices added ‘left join’ implementation. Rd files added, needs proofreading.","code":""},{"path":"/news/index.html","id":"version-01-0--january-20-2011","dir":"Changelog","previous_headings":"","what":"Version 0.1-0 – January 20, 2011","title":"Version 0.1-0 – January 20, 2011","text":"Start development S4 classes.","code":""}]
